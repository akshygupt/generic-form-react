{"version":3,"sources":["form/FormReducer.ts","form/FormContext.tsx","form/Form.tsx","form/FormTextInput.tsx","form/FormErrorMessage.tsx","examples/Example.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FormReducerConstants","initialFormState","values","errors","touched","submitAttempt","setTouchedValue","status","Object","keys","state","action","type","SET_VALUE","payload","name","value","SET_INITIAL_VALUE","SUBMIT_ATTEMPT","SET_TOUCHED","SET_ERROR","initialFrom","FormState","dispatch","FromContext","React","useFromContext","FromsProvider","props","FromReducer","Provider","children","Form","_action","isEmpty","initialValues","noValidate","className","onSubmit","e","preventDefault","validate","FormWrapper","FormTextInput","rest","fields","validateField","onChange","target","onBlur","FormErrorMessage","Example","firstName","lastName","email","a","console","log","Promise","r","setTimeout","alert","JSON","stringify","test","htmlFor","id","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.760e0243.chunk.js","sourcesContent":["import { FormValues, FormTouchedValues } from \"./Form\";\n\nexport enum FormReducerConstants {\n  SET_VALUE = \"SET_VALUE\",\n  SET_TOUCHED = \"SET_TOUCHED\",\n  SET_ERROR = \"SET_ERROR\",\n  SUBMIT_ATTEMPT = \"SUBMIT_ATTEMPT\",\n  SET_INITIAL_VALUE = \"SET_INITIAL_VALUE\",\n}\n\nexport interface IFormState {\n  values: FormValues;\n  errors: any;\n  touched: FormTouchedValues;\n  submitAttempt: number;\n}\n\nexport const initialFormState: IFormState = {\n  values: {},\n  errors: {},\n  touched: {},\n  submitAttempt: 0,\n};\n\nconst setTouchedValue = (values: FormValues, status: boolean) => {\n  const touched: FormTouchedValues = {};\n  for (let key of Object.keys(values)) {\n    touched[key] = status;\n  }\n  return touched;\n};\n\nexport default (state: IFormState, action: any) => {\n  switch (action.type) {\n    case FormReducerConstants.SET_VALUE:\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n    case FormReducerConstants.SET_INITIAL_VALUE:\n      return {\n        ...state,\n        values: action.payload,\n      };\n    case FormReducerConstants.SUBMIT_ATTEMPT:\n      return {\n        ...state,\n        touched: setTouchedValue(state.values, true),\n        submitAttempt: state.submitAttempt + 1,\n      };\n    case FormReducerConstants.SET_TOUCHED:\n      return {\n        ...state,\n        touched: {\n          ...state.touched,\n          [action.payload.name]: action.payload.touched,\n        },\n      };\n    case FormReducerConstants.SET_ERROR:\n      return {\n        ...state,\n        errors: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import * as React from \"react\";\nimport FromReducer, { IFormState, initialFormState } from \"./FormReducer\";\n\nexport interface IFromContext {\n  FormState: IFormState;\n  dispatch: React.Dispatch<any>;\n}\n\nconst initialFrom: IFromContext = {\n  FormState: initialFormState,\n  dispatch: () => {}\n};\n\nexport const FromContext = React.createContext<IFromContext>(initialFrom);\n\nexport const useFromContext = () => React.useContext(FromContext);\n\nexport interface FromsProviderProps {}\n\nconst FromsProvider: React.SFC<FromsProviderProps> = (props) => {\n  const [FormState, dispatch] = React.useReducer(FromReducer, initialFormState);\n  return (\n    <FromContext.Provider value={{ FormState, dispatch }}>\n      {props.children}\n    </FromContext.Provider>\n  );\n};\n\nexport default FromsProvider;\n","import * as React from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\nimport FromsProvider, { useFromContext } from \"./FormContext\";\nimport { FormReducerConstants } from \"./FormReducer\";\n\nexport interface FormValues {\n  [field: string]: any;\n}\n\nexport interface FormTouchedValues {\n  [field: string]: boolean;\n}\n\nexport interface FormErrorsValues {\n  [field: string]: string | string[];\n}\n\nexport interface FormProps<FormValues> {\n  initialValues: FormValues;\n  onSubmit: (values: FormValues) => void | Promise<any>;\n  children: React.ReactNode;\n  action?: string;\n  validate?: (values: FormValues) => void | FormErrorsValues;\n  className?: string;\n}\n\nconst Form: React.SFC<FormProps<FormValues>> = (props) => {\n  const _action = props.action || \"#\";\n  const { FormState, dispatch } = useFromContext();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch({\n      type: FormReducerConstants.SUBMIT_ATTEMPT,\n    });\n    //run validation\n    let errors: void | FormErrorsValues = {};\n    if (props.validate && typeof props.validate === \"function\") {\n      errors = props.validate(FormState.values);\n      dispatch({\n        type: FormReducerConstants.SET_ERROR,\n        payload: errors,\n      });\n    }\n    // if there are no errors\n    if (isEmpty(errors)) {\n      // submit\n      return props.onSubmit(FormState.values);\n    }\n    return;\n  };\n\n  // set initial value\n  React.useEffect(() => {\n    if (!isEmpty(props.initialValues)) {\n      dispatch({\n        type: FormReducerConstants.SET_INITIAL_VALUE,\n        payload: props.initialValues,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <form\n      noValidate\n      action={_action}\n      className={props.className}\n      onSubmit={handleSubmit}\n    >\n      {props.children}\n    </form>\n  );\n};\n\nconst FormWrapper: React.SFC<FormProps<FormValues>> = (props) => {\n  return (\n    <FromsProvider>\n      <Form {...props} />\n    </FromsProvider>\n  );\n};\n\nexport default FormWrapper;\n","import * as React from \"react\";\nimport { useFromContext } from \"./FormContext\";\nimport { FormReducerConstants } from \"./FormReducer\";\n\nexport interface FormTextInputProps {\n  name: string;\n  id?: string;\n  placeholder?: string;\n  validate?: (values: any) => void | string;\n  className?: string;\n}\n\nconst FormTextInput: React.SFC<FormTextInputProps> = (props) => {\n  const {validate, ...rest} = props;\n  const { FormState, dispatch } = useFromContext();\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: FormReducerConstants.SET_VALUE,\n      payload: {\n        name: props.name,\n        value: e.target.value,\n      },\n    });\n  };\n\n  const fields = {\n    value: FormState.values[props.name] || \"\"\n  }\n\n  const validateField = () => {\n    if(props.validate && typeof props.validate === \"function\") {\n      const errors = {\n        ...FormState.errors,\n        [props.name]: props.validate(FormState.values[props.name])\n      }\n      dispatch({\n        type: FormReducerConstants.SET_ERROR,\n        payload: errors\n      })\n    }\n  };\n\n  React.useEffect(() => {\n    // if a submit attempt has been made, then run the field\n    // level validations\n    if(FormState.submitAttempt) {\n      validateField();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [FormState.submitAttempt])\n\n  const handleBlur = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: FormReducerConstants.SET_TOUCHED,\n      payload: {\n        name: props.name,\n        touched: true\n      }\n    })\n    validateField();\n  };\n\n  return (\n    <input\n      {...rest}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      type=\"text\"\n      {...fields}\n    />\n  );\n};\n\nexport default FormTextInput;\n","import * as React from \"react\";\nimport { useFromContext } from \"./FormContext\";\n\nexport interface FormErrorMessageProps {\n  name: string;\n}\n\nconst FormErrorMessage: React.SFC<FormErrorMessageProps> = (props) => {\n  const { FormState } = useFromContext();\n  if (FormState.touched[props.name] && FormState.errors[props.name]) {\n    return <div className=\"error\">{FormState.errors[props.name]}</div>;\n  }\n  return null;\n};\n\nexport default FormErrorMessage;\n","import * as React from \"react\";\nimport { Form, FormTextInput, FormErrorMessage } from \"../form\";\nimport { FormValues, FormErrorsValues } from \"../form/Form\";\nimport \"../form/form.css\";\nimport \"./example.css\";\n\nexport interface ExampleProps {}\n\nconst Example: React.SFC<ExampleProps> = (props) => {\n  const initialValues: FormValues = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  };\n  return (\n    <div className=\"app\">\n      <h1>Sign Up</h1>\n      <Form\n        initialValues={initialValues}\n        onSubmit={async (values) => {\n          console.log(\"values\", values);\n          await new Promise((r) => setTimeout(r, 500));\n          alert(JSON.stringify(values, null, 2));\n        }}\n        className=\"form\"\n        validate={(values) => {\n          const errors: FormErrorsValues = {};\n          if (!values.firstName) {\n            errors.firstName = \"Required\";\n          }\n          if (!values.email) {\n            errors.email = \"Required\";\n          } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n          ) {\n            errors.email = \"Invalid email address\";\n          }\n          return errors;\n        }}\n      >\n        <div className=\"field-group\">\n          <label className=\"label\" htmlFor=\"firstName\">First Name</label>\n          <FormTextInput\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"First Name\"\n            className=\"field\"\n          />\n          <FormErrorMessage name=\"firstName\" />\n        </div>\n        <div className=\"field-group\">\n          <label className=\"label\" htmlFor=\"lastName\">Last Name</label>\n          <FormTextInput\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"Last Name\"\n            className=\"field\"\n            validate={(value) => {\n              let errors: string = \"\";\n              if (!value) {\n                errors = \"Required\";\n              }\n              return errors;\n            }}\n          />\n          <FormErrorMessage name=\"lastName\" />\n        </div>\n        <div className=\"field-group\">\n          <label className=\"label\" htmlFor=\"email\">Email</label>\n          <FormTextInput\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"abc@example.com\"\n            className=\"field\"\n          />\n          <FormErrorMessage name=\"email\" />\n        </div>\n        <button className=\"submit-button\" type=\"submit\">Submit</button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Example;\n","import React from 'react';\nimport './App.css';\nimport Example from './examples/Example';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Example />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}